---
title: "Empowering Trauma and EMS QI Processes"
subtitle: "{traumar} and {nemsqar}"
author: "Nicolas Foss, Ed.D., MS"
date: "August 10, 2025"
format:
  revealjs:
    footer: "useR! 2025 - Durham, NC"
    logo: theme/HHS_PH_horiz_color_print.jpg
    incremental: true
    transition: slide
    transition-speed: fast
    menu: false
    theme: theme/theme.scss
    title-slide-attributes:
      class: title-slide
    slide-number: true
    self-contained: true
    toc: false
    code-overflow: wrap
    notes: true
execute: 
  echo: true
  warning: false
  message: false
---

## QI Matters to Trauma and EMS Programs

- EMS and trauma systems critically depend on timely, accurate performance data
- Most U.S. jurisdictions require reporting to a centralized trauma registry and EMS registry
- Each hospital and EMS service have access to their own raw data via their Electronic Health Record (EHR)
- Hospitals and EMS services often lack infrastructure for data science and/or staff  
- EHRs and National repositories for EMS/trauma data provide limited supports for performance calculation

---

## Overview: National Context

- **National Trauma Data Bank**: trauma registry data, hospital-based  
- **National EMS Information System**: national EMS data, prehospital events
- **NTDB and NEMSIS**: Consistent element names for respective registry types, standardized formats
- **National EMS Quality Alliance**: National EMS Quality Alliance, expert EMS stakeholders, published 21 EMS service quality measures
- **SEQIC**: System Evaluation and Quality Improvement Committee, Iowa-based, designed 13 trauma system quality measures

---

## Introducing `traumar`

- Implements metrics driven the by academic literature
  - Risk-adjusted mortality metrics
    - W, M, and Z scores (Based on the Major Trauma Outcomes Study)
    - Relative mortality metric (RMM) from Napoli et a. (2017)
- Built to calculate SEQIC indicators 
- Friendly to NTDB data formats and others

---

## `traumar`: Examples!
Here, we will explore `traumar::seqic_indicator_1()`

```{r seqic-data, echo=FALSE}

# Total number of patients
n_patients <- 500

# Set a random number seed
set.seed(10232015)

# Some useful synthetic data
  valid_data <- tibble::tibble(
  incident_id = 1:n_patients,
  activation_level = factor(
    sample(c("Level 1", "Level 2", "None"), 
           size = n_patients, 
           replace = TRUE, 
           prob = c(0.8, 0.1, 0.1)
           )
    ),
  provider_type = factor(
    sample(c("Surgery/Trauma", "Emergency Medicine"), 
           size = n_patients, 
           replace = TRUE
           )
    ),
  trauma_level = factor(
    sample(c("I", "II", "III", "IV"), 
           size = n_patients, 
           replace = TRUE, 
           prob = c(0.3, 0.3, 0.2, 0.2)
           )
    ),
  response_minutes = rnorm(500, mean = 8, sd = 5),
  provider = sample(c("Dr. A", "Dr. B", "Dr. C", "Dr. D"), 
                    size = n_patients, 
                    replace = TRUE
                    )
)
  
# Parameters

# Arbitrary group labels
groups <- sample(x = LETTERS[1:7], size = n_patients, replace = TRUE)

# Trauma types
trauma_type_values <- sample(
  x = c("Blunt", "Penetrating"),
  size = n_patients,
  replace = TRUE
)

# RTS values
rts_values <- sample(
  x = seq(from = 0, to = 7.8408, by = 0.005),
  size = n_patients,
  replace = TRUE
)

# patient ages
ages <- sample(
  x = seq(from = 0, to = 100, by = 1),
  size = n_patients,
  replace = TRUE
)

# ISS scores
iss_scores <- sample(
  x = seq(from = 0, to = 75, by = 1),
  size = n_patients,
  replace = TRUE
)

# Generate survival probabilities (Ps)
Ps <- traumar::probability_of_survival(
  trauma_type = trauma_type_values,
  age = ages,
  rts = rts_values,
  iss = iss_scores
)

# Simulate survival outcomes based on Ps
survival_outcomes <- rbinom(n_patients, size = 1, prob = Ps)

# Create data frame
data <- data.frame(Ps = Ps, survival = survival_outcomes, groups = groups) |>
  dplyr::mutate(death = dplyr::if_else(survival == 1, 0, 1))

# final data
valid_data <- dplyr::bind_cols(valid_data, data)
```

--- 

## Example Trauma Data

See the GitHub repo ^[repo at: https://www.github.com/bemts-hhs/useR_2025] for this presentation for how the data were generated.
```{r seqic-data-check, echo=TRUE}

# Check out the data
dplyr::glimpse(valid_data)
```

--- 

## Run the SEQIC Indicator 1 Function
Group the output by verification level and calculate 95% confidence intervals
```{r run-seqic-1, echo=TRUE}
indicator_1 <- valid_data |> 
  traumar::seqic_indicator_1(
  trauma_team_activation_level = activation_level,
  trauma_team_physician_service_type = provider_type,
  level = trauma_level,
  included_levels = c("I", "II", "III", "IV"),
  unique_incident_id = incident_id,
  response_time = response_minutes,
  trauma_team_activation_provider = provider,
  groups = "trauma_level",
  calculate_ci = "wilson"
) |> 
  dplyr::select(trauma_level, tidyselect::matches("(?:seqic_|ci_)1[ad]"))

```

---

## Results

The output ^[We are just looking at the calculated performance columns for Indicators 1a and 1d and their 95% confidence intervals.
By default, the `seqic_indicator_*()` functions will also give the numerator and denominator.]! 
```{r print-seqic-1, echo=TRUE, results='markup'}
indicator_1 |> 
  dplyr::mutate(
    dplyr::across(-1, 
                  ~ ifelse(!is.na(.), 
      traumar::pretty_percent(variable = ., n_decimal = 2), NA_real_)))
```

--- 

## `traumar`: Examples!
Here, we will explore `traumar::rm_bin_summary()`

---

## Run the `traumar::rm_bin_summary()` Function
No grouping ^[Grouping will make for a massive slide.] and calculate 95% confidence intervals

```{r run-rmm, echo=TRUE, results='markup'}
rm_output <- valid_data |> 
  traumar::rm_bin_summary(Ps_col = Ps,
                          outcome_col = survival,
                          group_vars = NULL,
                          n_samples = 100,
                          Divisor1 = 3,
                          Divisor2 = 3,
                          Threshold_1 = 0.8,
                          Threshold_2 = 0.9,
                          seed = 10232015
                          )
```

---
## `traumar::rm_bin_summary()` Results!

```{r rm-output, echo=TRUE, results='markup'}
rm_output
```

---

## `nemsqar`: EMS QI with NEMSIS

- Built on NEMSQA performance measures
- Automatically detects and validates key elements
- Scales to full state-level EMS datasets

---

## `nemsqar`: Example Functions

```r
nemsqar::adult_population(data)
nemsqar::trauma_population(data)
nemsqar::respiratory_01(data)

```

- `*_population()` functions define eligible cases
- Wrapper functions implement full NEMSQA measures

---

## Real-world Impact  

- `traumar`: Risk-adjusted benchmarking + SEQIC indicators for all 120 trauma centers in Iowa
- `nemsqar`^[Similar trauma/EMS bureaus in Oregon and Connecticut are using `nemsqar`, along with the quality managers at Dallas Fire and Washington D.C. Fire]: First statewide report on all 21 NEMSQA measures in Iowa
- Reproducible, interpretable, fast

--- 

## Join us

- Open source needs more voices!
- Trauma, EMS, epidemiology - R users welcome!
- Contributors:
  - Nicolas Foss, Iowa HHS
  - Samuel Kordik, Dallas Fire
  - Alyssa Green, ESO

---

<h1>Thank you!</h1>

<br>

<h2>Questions?</h2>

---

## Contact

**Nicolas Foss, Ed.D., MS**  
**Epidemiologist**  
Bureau of Emergency Medical and Trauma Services  
Bureau of Health Statistics  
Division of Public Health  
Iowa Department of Health and Human Services  
e: nicolas.foss at hhs.iowa.gov  
c: 515-985-9627  
GitHub: bemts-hhs  
slides: bemts-hhs/useR_2025
